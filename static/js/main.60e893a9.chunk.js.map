{"version":3,"sources":["reducer.js","components/Header.jsx","components/Card.jsx","components/CardList.jsx","action.js","constants.js","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/App.jsx","serviceWorker.js","index.js"],"names":["initialSearchField","searchField","initialCats","cats","isPending","error","Header","className","React","Component","Card","id","name","email","src","alt","connect","state","requestCats","searchCats","dispatch","type","fetch","then","response","json","payload","catch","useEffect","filterCats","filter","cat","toLowerCase","includes","map","key","onSearchChange","e","target","value","aria-label","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","hasError","info","this","setState","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.60e893a9.chunk.js","sourcesContent":["//-- Constants --//\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_CATS_PENDING,\n  REQUEST_CATS_SUCCESS,\n  REQUEST_CATS_FAILED\n} from \"./constants\";\n\n//----------------------------------------------------//\n//----------------------------------------------------//\n\nconst initialSearchField = {\n  searchField: \"\"\n};\n\nexport const searchCats = (state = initialSearchField, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n//----------------------------------------------------//\n\nconst initialCats = {\n  cats: [],\n  isPending: false,\n  error: \"\"\n};\n\nexport const requestCats = (state = initialCats, action = {}) => {\n  switch (action.type) {\n    case REQUEST_CATS_PENDING:\n      return {\n        ...state,\n        isPending: true\n      };\n    case REQUEST_CATS_SUCCESS:\n      return {\n        ...state,\n        cats: action.payload,\n        isPending: false\n      };\n    case REQUEST_CATS_FAILED:\n      return {\n        ...state,\n        error: action.payload,\n        isPending: false\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\n\n//----------------------------------------------------//\n//----------------------------------------------------//\n\nclass Header extends React.Component {\n  render() {\n    return <h1 className=\"f1\">Cat Friends</h1>;\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\n//----------------------------------------------------//\n//----------------------------------------------------//\n\nconst Card = ({ id, name, email }) => (\n  <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n    <img src={`https://robohash.org/${id}?set=set4&size=250x250`} alt=\"cat\" />\n    <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React, { useEffect } from \"react\";\n\nimport { connect } from \"react-redux\";\n\n//-- Actions --//\nimport { requestCats } from \"../action\";\n\n//-- Components --//\nimport Card from \"./Card\";\n\n//----------------------------------------------------//\n//----------------------------------------------------//\n\nconst mapStateToProps = state => ({\n  cats: state.requestCats.cats,\n  isPending: state.requestCats.isPending,\n  searchField: state.searchCats.searchField\n});\n\nconst mapDispatchToProps = dispatch => ({\n  requestCats: () => dispatch(requestCats())\n});\n\nconst CardList = ({ cats, isPending, searchField, requestCats }) => {\n  useEffect(() => {\n    requestCats();\n  }, [requestCats]);\n\n  const filterCats = cats.filter(cat =>\n    cat.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  return isPending ? (\n    <h1 className=\"tc\">Loading ...</h1>\n  ) : (\n    <div>\n      {filterCats.map(cat => (\n        <Card key={cat.id} {...cat} />\n      ))}\n    </div>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CardList);\n","//-- Constants --//\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_CATS_PENDING,\n  REQUEST_CATS_SUCCESS,\n  REQUEST_CATS_FAILED\n} from \"./constants\";\n\n//----------------------------------------------------//\n//----------------------------------------------------//\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\n//----------------------------------------------------//\n\nexport const requestCats = () => dispatch => {\n  dispatch({ type: REQUEST_CATS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(cats => dispatch({ type: REQUEST_CATS_SUCCESS, payload: cats }))\n    .catch(error => dispatch({ type: REQUEST_CATS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_CATS_PENDING = \"REQUEST_CATS_PENDING\";\nexport const REQUEST_CATS_SUCCESS = \"REQUEST_CATS_SUCCESS\";\nexport const REQUEST_CATS_FAILED = \"REQUEST_CATS_FAILED\";\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\n\n//-- Actions --//\nimport { setSearchField } from \"../action\";\n\n//----------------------------------------------------//\n//----------------------------------------------------//\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: e => dispatch(setSearchField(e.target.value))\n});\n\nconst SearchBox = ({ onSearchChange }) => (\n  <div className=\"pa2\">\n    <input\n      aria-label=\"Search Cats\"\n      className=\"pa3 ba b--green bg-lightest-blue\"\n      type=\"text\"\n      placeholder=\"Search\"\n      onChange={onSearchChange}\n    />\n  </div>\n);\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SearchBox);\n","import React from \"react\";\n\n//----------------------------------------------------//\n//----------------------------------------------------//\n\nconst Scroll = props => (\n  <div\n    style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"500px\" }}\n  >\n    {props.children}\n  </div>\n);\n\nexport default Scroll;\n","import React from \"react\";\n\n//----------------------------------------------------//\n//----------------------------------------------------//\n\nclass ErrorBoundry extends React.Component {\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    return this.state.hasError ? (\n      <h1>Oops. Something went wrong !</h1>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundry;\n","import React from \"react\";\n\n//-- Components --//\nimport Header from \"../components/Header\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n//-- Styles --//\nimport \"./App.css\";\n\n//----------------------------------------------------//\n//----------------------------------------------------//\n\nconst App = () => {\n  return (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox />\n      <Scroll>\n        <ErrorBoundry>\n          <CardList />\n        </ErrorBoundry>\n      </Scroll>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nimport \"tachyons\";\n\n//-- Reducer --//\nimport { searchCats, requestCats } from \"./reducer\";\n\n//-- Components --//\nimport App from \"./containers/App\";\n\n//-- Styles --//\nimport \"./index.css\";\n\n//-- Service Worker --//\nimport * as serviceWorker from './serviceWorker';\n\n//----------------------------------------------------//\n//----------------------------------------------------//\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchCats, requestCats });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}